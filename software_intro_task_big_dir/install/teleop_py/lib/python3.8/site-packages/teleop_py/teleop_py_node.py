# Copyright 2022 Siddharth Saha
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

import teleop_py

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Joy
from teleop_msgs.msg import VehicleControlData

from teleop_msgs.srv import EStopService

class TeleopPy(Node):
    def __init__(self):
        super().__init__("teleop_py_node")
        self.subsription = self.create_subscription(
            Joy,
            'input_joy',
            self.listener_callback,
            10
        )

        self.publisher_ = self.create_publisher(
            VehicleControlData, 
            'output_teleop',
            10)
        timer_period = 0.5
        self.timer = self.create_timer(timer_period, self.timer_callback)

        self.cli = self.create_client(EStopService, 'estop_service')
        while not self.cli.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('service not available, waiting again...')
        self.req = AddThreeInts.Request()                
    
    def listener_callback(self, msg):
        self.get_logger().info('I heard "%s"' % msg.axes)
        self.get_logger().info('I heard "%s"' % msg.buttons)
        self.get_logger().info('I heard "%s"' % msg.header)
        # when estop is triggered
        # if "A" is pressed
        if (msg.buttons[0] == 1):
            self.req.set_estop = True 
        if (msg.buttons[0] == 0):
            self.req.set_estop = False

    def timer_callback(self):
        # Setting up the messages here
        msg = VehicleControlData()
        msg.throttle = 1.2
        msg.steering = 1.2
        msg.brake = 1.2
        msg.estop = True


        self.publisher_.publish(msg)
        self.get_logger().info('Throttle:"%s"' % msg.throttle)
        self.get_logger().info('Steering:"%s"' % msg.steering)
        self.get_logger().info('Brake:"%s"' % msg.brake)
        self.get_logger().info('Estop Status:"%s"' % msg.estop)
        

def main(args=None):
    rclpy.init(args=args)
    teleop_py = TeleopPy()
    rclpy.spin(teleop_py)

    teleop_py.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()